function checkList(text) {
  const categories = {
      'Name': ['Name'],
      'Job Title/Position': ['Job Title', 'Position'],
      'Contact Details - Mobile number': ['Mobile number', 'Phone number'],
      'Contact Details - email address': ['email address', 'Email', "@"],
      'Contact Details - LinkedIn profile': ['LinkedIn profile', 'LinkedIn'],
      'Contact Details - location': ['location', 'Address'],
      'Profile summary': ['Profile summary', 'Summary', "Objective"],
      'Skill / Core Competencies / Technical skills / Areas of expertise': [
          'Skill',
          'Core Competencies',
          'Technical skills',
          'Areas of expertise'
      ],
      'Work experience / Internship': ['Work experience', 'Internship'],
      'Awards and Recognition': ['Awards', 'Recognition'],
      'Academic Records / Education': ['Academic Records', 'Education'],
      'Projects': ['Projects'],
      'Courses and Certifications': ['Courses', 'Certifications'],
      'Languages Known': ['Languages Known', 'Languages']
  };

  const results = {};

  Object.keys(categories).forEach(category => {
      const keywords = categories[category];
      const lowerCaseText = text.toLowerCase();

      // Check if any of the keywords are found in the text
      results[category] = keywords.some(keyword => lowerCaseText.includes(keyword.toLowerCase()));
  });

  return results;
}





import { GoogleGenerativeAI } from "@google/generative-ai";

const API_KEY = "AIzaSyBx6rcdADN5ZWcJw8K77Ns4T7xmxeeHcYo";
const genAI = new GoogleGenerativeAI(API_KEY);

const uploadForm = document.getElementById("uploadForm");
const progressElement = document.getElementById("progress");
const resumeTextElement = document.getElementById("resumeText");
const descriptionInput = document.querySelector(".description-input");

uploadForm.addEventListener("submit", async function (e) {
  e.preventDefault();
  const formData = new FormData(this);

  progressElement.textContent = "Uploading...";

  try {
    const response = await fetch("/upload", {
      method: "POST",
      body: formData,
    });

    if (response.ok) {
      const result = await response.json();
      // Use the extracted text with Generative AI
      await useGenerativeAI(result.text);
    } else {
      alert("Failed to extract text.");
    }
  } catch (error) {
    console.error("Error:", error);
    alert("An error occurred.");
  } finally {
    progressElement.textContent = "Finished";
  }
});

async function useGenerativeAI(text) {
  try {
    let model = genAI.getGenerativeModel({
      model: "gemini-1.5-flash",
      generationConfig: { responseMimeType: "application/json" },
    });

    const prompt = `Generate a JSON object in JavaScript with the following structure:
{
  "checkList" :{
  "name": "Name",
  "jobTitle": "Job Title/Position",
  "contactDetails": {
    "mobileNumber": "Mobile number",
    "email": "Email address",
    "linkedinProfile": "LinkedIn profile URL",
    "location": "Location",
    "personalWebsite": "personal website or portfolio"
  },
  "profileSummary": "Profile summary or objective",
  "awardsAndRecognition": [{"title": "Award", "date": "Date"}],
  "education": [{"institution": "Institution", "degree": "Degree", "startDate": "Start Date", "endDate": "End Date"}],
  "projects": [{"title": "Project", "link": "URL"}],
  "certifications": [{"title": "Course", "institution": "Institution", "date": "Date"}],
  "languagesKnown": ["Language 1", "Language 2"]
  },
  "matchDescription":{
  "skillsMatch": ["Skill count"],
  "readability": ["Grade(Excellent, Good)"],
  "readingTime": ["in minutes or seconds"],
  "actionVerb": ["action verb count"],
  "keywordMatch": ["keyword count"],
  "workExperience": ["check required experience"],
  "score": ["give overall score"]
  }
}
\n\n${text}\n\n${descriptionInput.value}`;

    const result = await model.generateContent(prompt);

    if (result && result.response) {
      const responseJson = JSON.parse(result.response);
      console.log("Response:", responseJson);
      resumeTextElement.textContent = JSON.stringify(responseJson, null, 2);
    } else {
      console.error("Unexpected response format:", result);
      resumeTextElement.textContent = "Unexpected response format.";
    }
  } catch (error) {
    console.error("Error with Generative AI:", error.message || error);
    resumeTextElement.textContent = "An error occurred with Generative AI.";
  }
}





I have a job description and a resume. Please analyze the resume to determine how well it matches the job description. Provide a detailed JSON response with the following structure:

{
  "checkList": {
    "name": "Name or null if not available",
    "jobTitle": "Job Title/Position or null if not available",
    "contactDetails": {
      "mobileNumber": "Mobile number or null if not available",
      "email": "Email address or null if not available",
      "linkedinProfile": "LinkedIn profile URL or null if not available",
      "location": "Location or null if not available",
      "personalWebsite": "Personal website or portfolio or null if not available"
    },
    "profileSummary": "Profile summary or objective or null if not available",
    "awardsAndRecognition": [{"title": "Award or null", "date": "Date or null"}] or null if not available,
    "education": [{"institution": "Institution or null", "degree": "Degree or null", "startDate": "Start Date or null", "endDate": "End Date or null"}] or null if not available,
    "projects": [{"title": "Project or null", "link": "URL or null"}] or null if not available,
    "certifications": [{"title": "Course or null", "institution": "Institution or null", "date": "Date or null"}] or null if not available,
    "languagesKnown": ["Language 1", "Language 2"] or null if not available
  },
  "analysis": {
    "keywords": {
      "relevance_to_job_description": "High or null if not available",
      "frequency": "Optimal or null if not available"
    },
    "resume_structure": {
      "sections": {
        "contact_information": "Present or null if not available",
        "work_experience": "Present or null if not available",
        "education": "Present or null if not available",
        "skills": "Present or null if not available"
      },
      "formatting": "Simple or null if not available",
      "file_type": "PDF or null if not available"
    },
    "job_titles": {
      "exact_matches": "Matched or null if not available",
      "synonyms": "Recognized or null if not available"
    },
    "experience": {
      "work_history_relevance": "Relevant or null if not available",
      "duration": "Adequate or null if not available"
    },
    "education": {
      "degree_relevance": "Matching or null if not available",
      "institution_and_degree_level": "Accepted or null if not available"
    },
    "skills": {
      "hard_skills": "Relevant or null if not available",
      "soft_skills": "Included or null if not available"
    },
    "certifications_and_licenses": {
      "relevant_certifications": "Included or null if not available",
      "recency": "Current or null if not available"
    },
    "achievements_and_metrics": {
      "quantifiable_achievements": "Included or null if not available"
    },
    "consistency": {
      "dates": "Consistent or null if not available",
      "language": "Uniform or null if not available"
    },
    "spelling_and_grammar": {
      "accuracy": "Correct or null if not available"
    },
    "customization": {
      "tailoring": "Customized or null if not available"
    },
    "length": {
      "appropriate_length": "1-2 Pages or null if not available"
    },
    "readability": "High or null if not available",
    "estimated_time_to_read": "2 Minutes or null if not available",
    "overall_score": "85/100 or null if not available"
  },
  "summary": "The resume is well-optimized for ATS with strong alignment to job description keywords, clear structure, and appropriate length or null if not available.",
  "suggestions": "Consider adding more quantifiable achievements and ensure all certifications are up-to-date or null if not available."
}

Here is the job description:

[Insert job description here]

And here is the resume:

[Insert resume text here]





import { GoogleGenerativeAI } from "@google/generative-ai";

const API_KEY = "AIzaSyBx6rcdADN5ZWcJw8K77Ns4T7xmxeeHcYo";
const genAI = new GoogleGenerativeAI(API_KEY);

const uploadForm = document.getElementById("uploadForm");
const progressElement = document.getElementById("progress");
const propmtResultElement = document.getElementById("prompt-result");
const descriptionInput = document.querySelector(".description-input");
const body = document.getElementById("body");

uploadForm.addEventListener("submit", async function (e) {
  e.preventDefault();
  const formData = new FormData(this);

  // Create and append loader
  const loader = document.createElement("div");
  loader.classList.add("loader");
  propmtResultElement.textContent = "";
  body.appendChild(loader);
  progressElement.textContent = "Uploading...";

  try {
    const response = await fetch("/upload", {
      method: "POST",
      body: formData,
    });

    if (response.ok) {
      const result = await response.json();
      // Use the extracted text with Generative AI
      await useGenerativeAI(result.text);
    } else {
      alert("Failed to extract text.");
    }
  } catch (error) {
    console.error("Error:", error);
    alert("An error occurred.");
  } finally {
    body.removeChild(loader);
    progressElement.textContent = "";
  }
});

async function useGenerativeAI(text) {
  try {
    const model = genAI.getGenerativeModel({
      model: "gemini-1.5-flash",
      generationConfig: { responseMimeType: "application/json" },
    });

    const prompt = `I have a job description and a resume. Please analyze the resume to determine how well it matches the job description. Provide a detailed JSON response with the following structure:

{
  "checkList": {
    "name": "Name or null if not available",
    "jobTitle": "Job Title/Position or null if not available",
      "number": "Mobile number or null if not available",
      "email": "Email address or null if not available",
      "linkedin": "LinkedIn profile hyper link or null if not available",
      "location": "Location or null if not available",
      "portfolio": "Personal website or portfolio or null if not available"
    "summary": "Profile summary or objective",
    "awardsAndRecognition": "Awards or null if not available",
    "education": {
      "institution": "Institution or null",
       "degree": "Degree or null"
       } or null if not available,
    "projects": "title or null if not available",
    "certifications": {
      "title": "Course or null", 
      "institution": "Institution or null"
      } or null if not available,
    "languagesKnown": "Language 1", "Language 2" or null if not available
  },
  "matchingDetails": {
    "keywordsMatched": "List of keywords from the resume that match the job description or null if not available",
    "keywordsMissing": "List of keywords mentioned in the job description but missing from the resume or null if not available",
    "skillsMatched": "List of skills from the resume that match the job description or null if not available",
    "skillsMissing": "List of key skills mentioned in the job description but missing from the resume or null if not available",
    "experienceMatched": "List of relevant experiences from the resume that match the job description requirements or null if not available",
    "experienceMissing": "List of key experiences mentioned in the job description but missing from the resume or null if not available",
    "educationMatched": "Details of educational qualifications from the resume that match the job description or null if not available",
    "educationMissing": "Details of educational qualifications required by the job description but missing from the resume or null if not available",
    "certificationsMatched": "Certifications from the resume that match the job description or null if not available",
    "certificationsMissing": "Certifications required by the job description but missing from the resume or null if not available",
    "overallScore": "A score out of 100 indicating how well the resume matches the job description or null if not available",
    "readability": "Readability grade of the resume (e.g., Excellent, Good, Fair) or null if not available",
    "actionVerbsUsed": "Count of action verbs used in the resume or null if not available",
    "estimatedReadingTime": "Estimated reading time of the resume in minutes or null if not available"
  },
  "summary": "A brief summary explaining the overall match between the resume and the job description",
  "suggestions": "give some suggestions"
}

Here is the job description:

${descriptionInput.value}

And here is the resume:

${text}

Compare text and descriptionInput with matchdescription`;

    const result = await model.generateContent(prompt);

    const candidates = result.response.candidates;
    if (candidates.length > 0) {
      const responseContent = candidates[0].content;

      // Parse the text from content
      const responseText = responseContent.parts[0].text;
      const responseJson = JSON.parse(responseText);

      console.log("Response:", responseJson);

      propmtResultElement.innerHTML = "";

      // Function to create a nested list
      function createNestedList(obj) {
        const ul = document.createElement("ul");
        ul.classList.add("extracted-text");
        for (const [key, value] of Object.entries(obj)) {
          const li = document.createElement("li");
          li.classList.add("extracted-text-list");
          if (typeof value === "object" && value !== null) {
            li.textContent = `${key.toUpperCase()}:`;
            const nestedList = createNestedList(value);
            li.appendChild(nestedList);
          } else {
            li.textContent = `${key.toUpperCase()}: ${value}`;
          }
          ul.appendChild(li);
        }
        return ul;
      }

      // Create and display the nested list
      const list = createNestedList(responseJson);
      propmtResultElement.appendChild(list);
    } else {
      console.error("No candidates found in the response.");
      propmtResultElement.textContent = "No content available in the response.";
    }
  } catch (error) {
    console.error("Error with Generative AI:", error.message || error);
    propmtResultElement.textContent = "An error occurred with Generative AI.";
  }
}

git init
git add .
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/dhamodharan-dev/ats-checker.git
git push -u origin main
